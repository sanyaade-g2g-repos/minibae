/*****************************************************************************//*** "printirez.cpp"****	Cross platform file and resource file manager display application****	© Copyright 1999 Beatnik, Inc, All Rights Reserved.**	Written by Steve Hales****	Beatnik products contain certain trade secrets and confidential and**	proprietary information of Beatnik.  Use, reproduction, disclosure**	and distribution by any means are prohibited, except pursuant to**	a written license from Beatnik. Use of copyright notice is**	precautionary and does not imply publication or disclosure.****	Restricted Rights Legend:**	Use, duplication, or disclosure by the Government is subject to**	restrictions as set forth in subparagraph (c)(1)(ii) of The**	Rights in Technical Data and Computer Software clause in DFARS**	252.227-7013 or subparagraphs (c)(1) and (2) of the Commercial**	Computer Software--Restricted Rights at 48 CFR 52.227-19, as**	applicable.**** Modification History:****	7/8/99		Created*//*****************************************************************************/#include <stdio.h>#include "BAEFile.h"// given a pointer, get a long ordered in a Motorola waystatic unsigned long PV_GetLong(void const* pData){	register unsigned char	*pByte;	register unsigned long	data;	pByte = (unsigned char *)pData;	data = ((unsigned long)pByte[0] << 24L) |		   ((unsigned long)pByte[1] << 16L) | 		   ((unsigned long)pByte[2] << 8L) |		   (unsigned long)pByte[3];	return data;}//*******************// Display a IREZ file static void PV_DisplayIREZ(char *pReadFile){	BAEResourceType		resType;	BAELongResourceID	theID;	BAEFileResource		*pReadResource;	BAEResult			err;	unsigned long		size;	long				count, totalResourceCount, resourceIndex;	BAEResource			data;	char				name[256], typeName[5];	pReadResource = new BAEFileResource((BAEPathName)pReadFile, BAE_FILE_READ, &err);	if (pReadResource && (err == BAE_NO_ERROR))	{		// read master resource file		totalResourceCount = pReadResource->CountTypes();		printf("Total resource types %ld\n", totalResourceCount - 1);		for (resourceIndex = 0; resourceIndex < totalResourceCount; resourceIndex++)		{			resType = pReadResource->GetIndexedType(resourceIndex);			if (resType)			{				for (count = 0; ; count++)				{					data = pReadResource->GetIndexedResource(resType, &theID, count, name, 255, &size);					if (data)					{						BAEResourceType		displayType;												displayType = PV_GetLong(&resType);		// get type in motorola order to print																// platform independent						memcpy(typeName, &displayType, 4L);						typeName[4] = 0;						printf("Resource %s '%s' %ld; size %ld\n", typeName, name, theID, size);						err = pReadResource->DisposeResource(data, size);					}					else					{						// no more data of this type						break;					}				}			}		}	}	if (err)	{		printf("BAE err %d\n", err);	}	if (pReadResource)	{		delete pReadResource;	}abort:	printf("\rAll done.\n");}char		const usageString[] =	"Beatnik IREZ display application - pi 0.1\n"	"USAGE:  pi <source path>\n"	"           must be .rmf, or .hsb\n";int main(int argc, char* argv[], char* envp[]){	if (argc <= 1)	{		printf(stderr, usageString);		return -1;	}	printf("Displaying all IREZ resources:\n");	PV_DisplayIREZ(argv[1]);}